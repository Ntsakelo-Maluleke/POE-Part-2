/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Random;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import javax.swing.JOptionPane;
/**
 *
 * @author RC_Student_lab
 */
public class chats extends javax.swing.JFrame {
    private ArrayList<String> messSent = new ArrayList<>();
    ArrayList<String> messToSend = new ArrayList<>();
    ArrayList<String> messToSendLater = new ArrayList<>();
    ArrayList<MessagesJSON> jsonMessages = new ArrayList<>();
    /**
     * Creates new form chats
     */
    public chats() {
        initComponents();
        
    }
    public void Welcome(String message, ImageIcon icon, int durationMillis, int iconWidth, int iconHeight){
        Image image = icon.getImage();
        Image scaledImage = image.getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(scaledImage);
        
        JWindow welcomePopUp = new JWindow();
         
        welcomePopUp.setSize(300, 200);
        welcomePopUp.setLayout(new BorderLayout());
        
        JLabel iconLabel = new JLabel(scaledIcon);
        iconLabel.setHorizontalAlignment(SwingConstants.CENTER);
        JLabel textLabel = new JLabel(message, SwingConstants.CENTER);
        textLabel.setFont(new Font("Arial", Font.BOLD, 14));

        welcomePopUp.add(iconLabel, BorderLayout.CENTER);
        welcomePopUp.add(textLabel, BorderLayout.SOUTH);
        welcomePopUp.setLocationRelativeTo(null);
        welcomePopUp.setVisible(true);

        Timer closeTimer = new Timer(durationMillis, e -> welcomePopUp.dispose());
        closeTimer.setRepeats(false);
        closeTimer.start();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMessSend = new javax.swing.JButton();
        btnMessView = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnMessList = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnMessSend.setText("Send Messages");
        btnMessSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMessSendActionPerformed(evt);
            }
        });

        btnMessView.setText("View Messages");
        btnMessView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMessViewActionPerformed(evt);
            }
        });

        btnQuit.setText("Quit");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Chatsickle Chat Menu:");

        btnMessList.setText("View Active Message List");
        btnMessList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMessListActionPerformed(evt);
            }
        });

        jButton1.setText("Total Number of Messages");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMessView, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMessList, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMessSend, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(btnMessSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMessList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMessView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnQuit)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
    this.dispose();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnMessSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMessSendActionPerformed
       messageLoop();
    }//GEN-LAST:event_btnMessSendActionPerformed

    private void btnMessListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMessListActionPerformed
        messPrint();
        
    }//GEN-LAST:event_btnMessListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        messTotal();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnMessViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMessViewActionPerformed
       featureComing();
    }//GEN-LAST:event_btnMessViewActionPerformed

    public void featureComing(){
        JOptionPane.showMessageDialog(this, "Feature coming soon");
    }
    public void messageLoop(){
        String userID = JOptionPane.showInputDialog("Enter the username of the person you want to message:");
            if (userID == null || userID.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Recipient ID cannot be empty.");
                return;
    }
    
        String userPhnNum;
            while (true) {
        userPhnNum = JOptionPane.showInputDialog("Enter user contact phone number:");
        if (userPhnNum == null || userPhnNum.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Phone number cannot be empty.");
            return; 
        } else if (!UserValidation.isValidPhoneNumber(userPhnNum)) {
            JOptionPane.showMessageDialog(this,"Phone number must be 10 digits long and start with country code (e.g., +27XXXXXXXXX)","Invalid Phone Number",JOptionPane.ERROR_MESSAGE);
        } else {
            break; 
        }
    }


        String messNumInput = JOptionPane.showInputDialog("Please enter the number of messages you would like to send");
        int numMessages;
        
        try {
            numMessages = Integer.parseInt(messNumInput);
            if (numMessages <= 0 || numMessages > 10) {
                JOptionPane.showMessageDialog(this, "Please enter a number between 1 and 10.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number entered.");
            return;
        }
        collectMessages(numMessages,userPhnNum,userID);
    }
    
    public void collectMessages(int count, String phone, String identifier){
        for (int i = 1; i <= count; i++) {
            String message = JOptionPane.showInputDialog("Enter message #" + i + ":");
            if (message == null) {
                JOptionPane.showMessageDialog(this, "Message entry cancelled.");
                return;
            }
            if(message.trim().isEmpty()){
                JOptionPane.showMessageDialog(this, "Message cannot be empty.");
                i--;
                continue;
            }
            if (message.length() > 250) {
                JOptionPane.showMessageDialog(this, "Message exceeds 250 characters.");
                i--;
                continue;
            }
            
            String messageID = messID();
            String hash = messHash(messageID, i, message);
            
            int choice = messReview(i, message, messageID, hash);

            switch (choice) {
                case 1 -> {
                    String fullMessage = "ID: " + messageID + " | Hash: " + hash + " | Message: " + message;
                    messToSend.add(fullMessage);
                    messSent.add(fullMessage);
                }
                case 2 -> messToSendLater.add("ID: " + messageID + " | Hash: " + hash + " | Message: " + message);
                default -> JOptionPane.showMessageDialog(this, "Message #" + i + " disregarded.");
            }
        }
        JOptionPane.showMessageDialog(this, messToSend.size() + " message(s) ready to send.\n" + messToSendLater.size() + " saved to send later.");
        for (String fullMessage : messSent) {
            String[] parts = fullMessage.split(" \\| ");
            if (parts.length == 3) {
                String id = parts[0].substring(4);   
                String hash = parts[1].substring(6); 
                String content = parts[2].substring(9); 
                jsonMessages.add(new MessagesJSON(id, hash, content));
            }
        }
        messJSONsave(jsonMessages, "messages.json");
    }
    
    public String messID(){
        Random random = new Random();
        StringBuilder idBuilder = new StringBuilder();

        for (int i = 0; i < 10; i++) {
            idBuilder.append(random.nextInt(10));
        }

        return idBuilder.toString();
    }
    
    public String messHash(String messageID, int messageNumber, String messageText) {
        String[] words = messageText.trim().split("\\s+");
        String firstWord = words[0];
        String lastWord = words[words.length - 1];
        String hash = messageID.substring(0, 2) + ":" + messageNumber + ":" + firstWord + lastWord;
        return hash.toUpperCase();
    }
    
    public int messReview(int i, String message, String messageID, String messageHash) {
        Object[] options = {"Disregard", "Send Now", "Send Later"};

        return JOptionPane.showOptionDialog(this, "Review Message #" + i + ":\n\n" + message + "\n\nID: " + messageID + "\nHash: " + messageHash, "Review Message", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
    }
    
    public void messPrint() {
        if (messSent.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No messages have been sent during this session.");
            return;
        }

        StringBuilder messLog = new StringBuilder("Sent Messages:\n\n");
        int count = 1;
        for (String msg : messSent) {
            messLog.append(count++).append(". ").append(msg).append("\n\n");
        }

        JTextArea textArea = new JTextArea(messLog.toString());
        textArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(500, 300));

        JOptionPane.showMessageDialog(this, scrollPane, "Messages Sent", JOptionPane.INFORMATION_MESSAGE);
        
}
    
    public int messTotal() {
    int total = messSent.size();
    String message = "Total number of messages sent: " + total;
    JOptionPane.showMessageDialog(this, message, "Message Count", JOptionPane.INFORMATION_MESSAGE);
    return total;
}
    
    public void messJSONsave(List<MessagesJSON> messages, String filePath) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try {
            FileWriter writer = new FileWriter(filePath);
            gson.toJson(messages, writer);
            writer.close();
            java.io.File file = new java.io.File(filePath);
            String absolutePath = file.getAbsolutePath();
            JOptionPane.showMessageDialog(this, "Messages saved to:\n" + absolutePath);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving messages: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    class MessagesJSON {
        private String id;
        private String hash;
        private String content;

        public MessagesJSON(String id, String hash, String content) {
            this.id = id;
            this.hash = hash;
            this.content = content;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                chats chatWindow = new chats();
                chatWindow.setLocationRelativeTo(null);

        chatWindow.setVisible(true);
        
        ImageIcon icon = new ImageIcon("C:\\Users\\RC_Student_lab\\Documents\\NetBeansProjects\\chatsickle\\src\\images\\chatsickle_logo-removebg-preview.png");

        chatWindow.Welcome("Welcome to Chatsickle!", icon, 950,80,80);
            }
        });
        
        java.awt.EventQueue.invokeLater(() -> {
        
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMessList;
    private javax.swing.JButton btnMessSend;
    private javax.swing.JButton btnMessView;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
